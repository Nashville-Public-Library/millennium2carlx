#!/usr/bin/expect

# get_title_level_holds.exp
# James Staub
# Nashville Public Library

exp_internal 0 ; # 1 = verbose debugging to stdout
log_user 0 ; # 1 = send screens to stdout

# READ CONFIG.PWD.INI
source read_config.exp

# SET UP LOG
# TO WRITE TO THE LOG:
# logWrite $logFile "log entry"
source log.exp
set logFile "$localPath$name.log"
logWrite $logFile "START get_title_level_holds"

# TITLE LEVEL HOLDS EXTRACT
# copy mysql dump of holds database from waldo to catalog
spawn scp $solarisUser@$host:/iiidb/mysql/dumps/holds.dump $localPath/holds.dump
set timeout -1
expect "Password"
send "$solarisUserPassword\r"
expect "100%*\n"
close
# restore holds.dump, execute query to output file, drop restored db
set prompt {\$ $}
spawn bash
expect -re $prompt
send "mysql -u root -p < $localPath/holds.dump\r"
expect "Enter password:"
send "$mysqlUserPassword\r"
expect -re $prompt
# TO DO: braces, double quotes and expect tcl variables... $localPath does not work below, so I use ../data/ instead
send {mysql -u root -p -e 'SELECT nHoldRecNumber AS BID, "R*" AS TRANSCODE, nPatronNumber AS PATRONID, sPickupLocation AS RENEW, timestampDatePlaced AS TRANSDATE, "" AS BORROWERTYPE, "" AS BRANCH, trim(substring(sNormHoldStatus,-18,4)) AS POSITION FROM holds.holdsplaced WHERE nHoldType = 0;' holds > ../data/holds.txt }
send "\r"
expect "Enter password:"
send "$mysqlUserPassword\r"
expect -re $prompt
send {mysql -u root -p -e 'DROP DATABASE holds;'}
send "\r"
expect "Enter password:"
send "$mysqlUserPassword\r"
expect -re $prompt
send "rm -f $localPath/holds.dump\r"
close
set timeout $wait

logWrite $logFile "COMPLETE get_title_level_holds"

logWrite $logFile "START format_title_level_holds"
set prompt {\$ $}
spawn bash
expect -re $prompt
send "bash format_title_level_holds.sh\r"
set timeout -1
expect -re $prompt
close
set timeout $wait
logWrite $logFile "COMPLETE format_title_level_holds"
